{"meta":{"title":"技术小站","subtitle":null,"description":null,"author":"ZhangHutao","url":"http://yoursite.com","root":"/"},"pages":[{"title":"朋友","date":"2021-01-22T17:28:40.246Z","updated":"2021-01-22T17:28:40.246Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-01-20T18:55:13.533Z","updated":"2021-01-20T18:55:13.533Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-01-21T17:28:39.374Z","updated":"2021-01-21T17:28:39.374Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Jedis - Redis的Java的应用","slug":"Jedis - Redis与Java的应用","date":"2021-01-20T03:19:18.288Z","updated":"2021-01-20T03:51:24.215Z","comments":true,"path":"2021/01/20/Jedis - Redis与Java的应用/","link":"","permalink":"http://yoursite.com/2021/01/20/Jedis%20-%20Redis%E4%B8%8EJava%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"转载：Redis入门到精通-Redis与Java的应用 1. Jedis的使用Jedis就是redis支持java的第三方类库，我们可以使用Jedis类库操作redis数据库。 ​ 注意:Jedis2.7以上的版本才支持集群操作。 1.1 Maven依赖12345&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt;&lt;/dependency&gt; 1.2 连接redis服务12Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379); //默认端口6379 可以省略jedis.auth(&quot;redis&quot;); //无密码此步可省略 1.3 Redis Java String(字符串)12345Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379);jedis.auth(&quot;redis&quot;);​jedis.set(&quot;a&quot;, &quot;test1&quot;); // 存数据System.out.println(jedis.get(&quot;a&quot;)); // 取数据 1.4 Redis Java List(列表)123456789101112Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379);jedis.auth(&quot;redis&quot;);​//存储数据到列表中jedis.lpush(&quot;list1&quot;, &quot;Java&quot;);jedis.lpush(&quot;list1&quot;, &quot;Html5&quot;);jedis.lpush(&quot;list1&quot;, &quot;Python&quot;);// 获取存储的数据并输出List&lt;String&gt; list = jedis.lrange(&quot;list1&quot;, 0 ,-1);for(int i=0; i&lt;list.size(); i++) &#123; System.out.println(&quot;列表项为: &quot;+list.get(i));&#125; 1.5 Redis Java Keys12345678910Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379);jedis.auth(&quot;redis&quot;);​// 获取数据并输出Set&lt;String&gt; keys = jedis.keys(&quot;*&quot;);Iterator&lt;String&gt; it=keys.iterator() ;while(it.hasNext())&#123; String key = it.next(); System.out.println(key);&#125; 2. 将User表放入到 Redis缓存 ​ t_user表数据量很大，查询很频繁，鲜有更新操作，可以把t_user表放到redis缓存中，实现t_user表的快速查询。 ​ 测试过程中我们用到了object转jsonString 12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.12&lt;/version&gt;&lt;/dependency&gt; 2.1 准备User.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class User &#123; private String id; private String name; private int age; private String sex;​ public User() &#123; super(); &#125;​ public User(String id, String name, int age, String sex) &#123; super(); this.id = id; this.name = name; this.age = age; this.sex = sex; &#125;​ public String getId() &#123; return id; &#125;​ public void setId(String id) &#123; this.id = id; &#125;​ public String getName() &#123; return name; &#125;​ public void setName(String name) &#123; this.name = name; &#125;​ public int getAge() &#123; return age; &#125;​ public void setAge(int age) &#123; this.age = age; &#125;​ public String getSex() &#123; return sex; &#125;​ public void setSex(String sex) &#123; this.sex = sex; &#125;​ @Override public String toString() &#123; return &quot;User&#123;&quot; + &quot;id=&quot; + id + &quot;, name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &quot;, age=&quot; + age + &quot;, sex=&#x27;&quot; + sex + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125;&#125; 2.2 将User的数据放入到Redis1234567891011121314151617Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379);jedis.auth(&quot;redis&quot;);​User u1 = new User(UUID.randomUUID().toString(),&quot;jack1&quot;,21,&quot;m&quot;);User u2 = new User(UUID.randomUUID().toString(),&quot;jack2&quot;,22,&quot;m&quot;);User u3 = new User(UUID.randomUUID().toString(),&quot;jack3&quot;,23,&quot;m&quot;);User u4 = new User(UUID.randomUUID().toString(),&quot;jack4&quot;,24,&quot;m&quot;);User u5 = new User(UUID.randomUUID().toString(),&quot;jack5&quot;,25,&quot;m&quot;);​Map&lt;String,String&gt; userMap = new HashMap&lt;String,String&gt;();userMap.put(&quot;u1&quot;,JSON.toJSONString(u1));userMap.put(&quot;u2&quot;,JSON.toJSONString(u2));userMap.put(&quot;u3&quot;,JSON.toJSONString(u3));userMap.put(&quot;u4&quot;,JSON.toJSONString(u4));userMap.put(&quot;u5&quot;,JSON.toJSONString(u5));​jedis.hmset(&quot;t_user&quot;,userMap); 到Redis数据库服务器上观察： 123456789101112131415127.0.0.1:6379&gt; keys *1) &quot;t_user&quot;127.0.0.1:6379&gt; hkeys t_user1) &quot;u1&quot;2) &quot;u3&quot;3) &quot;u4&quot;4) &quot;u5&quot;5) &quot;u2&quot;127.0.0.1:6379&gt; hvals t_user1) &quot;&#123;\\&quot;age\\&quot;:21,\\&quot;id\\&quot;:\\&quot;740a1778-de0e-4426-b231-1f97d290b13c\\&quot;,\\&quot;name\\&quot;:\\&quot;jack1\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;2) &quot;&#123;\\&quot;age\\&quot;:23,\\&quot;id\\&quot;:\\&quot;5133d99f-b8a0-4062-8624-89a5dc5c8e89\\&quot;,\\&quot;name\\&quot;:\\&quot;jack3\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;3) &quot;&#123;\\&quot;age\\&quot;:24,\\&quot;id\\&quot;:\\&quot;f6d1a709-5f2c-4564-bec6-b8f63eef6a86\\&quot;,\\&quot;name\\&quot;:\\&quot;jack4\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;4) &quot;&#123;\\&quot;age\\&quot;:25,\\&quot;id\\&quot;:\\&quot;4c8b4122-c9f9-41b2-ba29-c0de2a257370\\&quot;,\\&quot;name\\&quot;:\\&quot;jack5\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;5) &quot;&#123;\\&quot;age\\&quot;:22,\\&quot;id\\&quot;:\\&quot;e48c6616-75c2-4d04-9e90-31b69a4632a4\\&quot;,\\&quot;name\\&quot;:\\&quot;jack2\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;127.0.0.1:6379&gt; 2.3 使用Redis中的User缓存数据t_user表数据量大，查询缓慢，如何实现t_user表数据的快速查询； 123​select * from t_user where age =25;select * from t_user where sex = &#x27;m&#x27;；​select * from t_user where sex = &#x27;w&#x27;； ​ 我们可以使用redis中的set类型预先设定查询结果集。 1234567891011121314151617181920212223242526272829303132333435​Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379);jedis.auth(&quot;redis&quot;);​//假设现在有mybatis的三个查询操作//userMapper.getUserListByAge(25)//userMapper.getUserListBySex(&quot;m&quot;)//userMapper.getUserListBySex(&quot;f&quot;)​//预设查询结果集final String user_list_by_age_25 = &quot;user_list_by_age_25&quot;;final String user_list_by_sex_m = &quot;user_list_by_sex_m&quot;;final String user_list_by_sex_f = &quot;user_list_by_sex_f&quot;;​//在初始化redis缓存的时候,模拟预设查询结果集// (在真正的开发中,使用mybatis二级换从数据库查询后再缓存到redis)//定义userMap存放t_user表的所有数据Map&lt;String,String&gt; userMap = new HashMap&lt;String,String&gt;();​User u1 = new User(UUID.randomUUID().toString(),&quot;jack&quot;,21,&quot;m&quot;);userMap.put(&quot;u1&quot;,JSON.toJSONString(u1));//u1 满足性别为m的条件,即u1为userMapper.getUserListBySex(&quot;m&quot;)的查询结果集jedis.sadd(user_list_by_sex_m,&quot;u1&quot;);​User u2 = new User(UUID.randomUUID().toString(),&quot;rose&quot;,25,&quot;f&quot;);userMap.put(&quot;u2&quot;,JSON.toJSONString(u2));//u2 满足sex=&#x27;f&#x27; age=25jedis.sadd(user_list_by_sex_f,&quot;u2&quot;);jedis.sadd(user_list_by_age_25,&quot;u2&quot;);​User u3 = new User(UUID.randomUUID().toString(),&quot;jack3&quot;,23,&quot;m&quot;);userMap.put(&quot;u3&quot;,JSON.toJSONString(u3));//u3 满足sex=&#x27;m&#x27;jedis.sadd(user_list_by_sex_m,&quot;u3&quot;);​jedis.hmset(&quot;t_user&quot;,userMap); Redis服务器结果： 123456789101112131415161718192021127.0.0.1:6379&gt; keys *1) &quot;user_list_by_age_25&quot;2) &quot;user_list_by_sex_m&quot;3) &quot;t_user&quot;4) &quot;user_list_by_sex_f&quot;127.0.0.1:6379&gt; hkeys t_user1) &quot;u1&quot;2) &quot;u2&quot;3) &quot;u3&quot;127.0.0.1:6379&gt; hvals t_user1) &quot;&#123;\\&quot;age\\&quot;:21,\\&quot;id\\&quot;:\\&quot;65224362-26b7-4858-9dfd-6c8df8d0dcce\\&quot;,\\&quot;name\\&quot;:\\&quot;jack\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;2) &quot;&#123;\\&quot;age\\&quot;:25,\\&quot;id\\&quot;:\\&quot;cd23782e-90a5-4c80-8c31-d0c874e623f6\\&quot;,\\&quot;name\\&quot;:\\&quot;rose\\&quot;,\\&quot;sex\\&quot;:\\&quot;f\\&quot;&#125;&quot;3) &quot;&#123;\\&quot;age\\&quot;:23,\\&quot;id\\&quot;:\\&quot;e5bb2423-c821-4267-b77c-0abef4777113\\&quot;,\\&quot;name\\&quot;:\\&quot;jack3\\&quot;,\\&quot;sex\\&quot;:\\&quot;m\\&quot;&#125;&quot;127.0.0.1:6379&gt; smembers user_list_by_age_251) &quot;u2&quot;127.0.0.1:6379&gt; smembers user_list_by_sex_m1) &quot;u1&quot;2) &quot;u3&quot;127.0.0.1:6379&gt; smembers user_list_by_sex_f1) &quot;u2&quot;127.0.0.1:6379&gt; ​ 这样在程序中userMapper.getUserListByAge(25)就可以通过从redis服务器上获得user_list_by_age_25数据进行使用。 12345678Jedis jedis = new Jedis(&quot;10.0.31.144&quot;,6379);jedis.auth(&quot;redis&quot;);Set&lt;String&gt; userlist = jedis.smembers(&quot;user_list_by_sex_m&quot;);for(String u : userlist)&#123; //拿到对对应ser的json字符串 System.out.println(jedis.hget(&quot;t_user&quot;,u)); //...这里可以再使用json转object方法&#125;","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"},{"name":"Jedis","slug":"Jedis","permalink":"http://yoursite.com/tags/Jedis/"}]},{"title":"Redis搭建及使用","slug":"redis-build","date":"2021-01-20T03:19:18.284Z","updated":"2021-01-20T03:54:24.928Z","comments":true,"path":"2021/01/20/redis-build/","link":"","permalink":"http://yoursite.com/2021/01/20/redis-build/","excerpt":"","text":"Docker 安装 Redis 系统环境：16.04.1-Ubuntu uname -a 获取 Redis 镜像 docker images #检查是否存在redis镜像 若已存在镜像 docker ps -a -q #查看镜像是否在运行 docker exec -it redis_test redis-server -v #redis_test 是运行redis名称 若不存在镜像 docker search redis #查看redis版本 docker pull redis:latest #获取最新redis版本 启动 Redis docker run -d -p 6379:6379 --name redis_test --restart=always redis #启动一个简单的redis服务 docker run -d -p 6379:6379 --name redis_test -v /usr/local/redis/redis.conf:/etc/redis/redis.conf --restart=always redis redis-server /etc/redis/redis.conf #配置文件见附件一 -d 后台运行 –restart=always #开机自启 -v #挂载路径：/usr/local/redis/redis.conf redis-server #以配置文件(/etc/redis/redis.conf)方式启动，配合-v使用;配置文件注意事项： bind 127.0.0.1 #注释掉这部分(同时protected-mode no)，这是限制redis只能本地访问 dir ./ #存放路径，（同时appendonly yes） #持久化搭配使用 protected-mode no #默认yes，开启保护模式，限制为本地访问 daemonize no#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程（可选），改为yes会使配置文件方式启动redis失败 测试docker exec -it redis_test redis-cliauth 123456 外部连接 软件：Another Redis Desktop Manager 下载：Gitee Github Redis Desktop Manager 免费版不支持SSH连接 Redis常用命令及Java使用 命令行 开启redis，进入命令行界面 设置缓存：set key value 获取缓存：get key 设置过期时间：setex key 失效时间(s) value 删除缓存：del key 工具使用 Redis Java 添加 pom.xml12345&lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/dependency&gt; application配置信息 123456789101112redis: database: 0 host: 127.0.0.1 port: 6379 password: # 如果未单独配置默认为空即可 timeout: 1000 jedis: pool: max-active: 8 max-wait: -1 max-idle: 8 min-idle: 0 jedis配置类Jedis - Redis与Java的应用整合springboot1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 @EnableCaching@Configurationpublic class RedisConfig &#123; @Value(&quot;$&#123;spring.redis.host&#125;&quot;) private String host; @Value(&quot;$&#123;spring.redis.database&#125;&quot;) private Integer database; @Value(&quot;$&#123;spring.redis.port&#125;&quot;) private Integer port; @Value(&quot;$&#123;spring.redis.password&#125;&quot;) private String pwd; @Primary @Bean(name = &quot;jedisPoolConfig&quot;) @ConfigurationProperties(prefix = &quot;spring.redis.pool&quot;) public JedisPoolConfig jedisPoolConfig() &#123; JedisPoolConfig jedisPoolConfig = new JedisPoolConfig(); jedisPoolConfig.setMaxWaitMillis(10000); return jedisPoolConfig; &#125; @Bean public RedisConnectionFactory redisConnectionFactory(JedisPoolConfig jedisPoolConfig) &#123; RedisStandaloneConfiguration redisStandaloneConfiguration = new RedisStandaloneConfiguration(); redisStandaloneConfiguration.setHostName(host); redisStandaloneConfiguration.setDatabase(database); redisStandaloneConfiguration.setPassword(pwd); redisStandaloneConfiguration.setPort(port); JedisClientConfiguration.JedisPoolingClientConfigurationBuilder jpcb = (JedisClientConfiguration.JedisPoolingClientConfigurationBuilder) JedisClientConfiguration.builder(); jpcb.poolConfig(jedisPoolConfig); JedisClientConfiguration jedisClientConfiguration = jpcb.build(); return new JedisConnectionFactory(redisStandaloneConfiguration, jedisClientConfiguration); &#125; /** * 配置redisTemplate针对不同key和value场景下不同序列化的方式 * * @param factory Redis连接工厂 * @return */ @Primary @Bean(name = &quot;redisTemplate&quot;) public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) &#123; RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;(); template.setConnectionFactory(factory); StringRedisSerializer stringRedisSerializer = new StringRedisSerializer(); template.setKeySerializer(stringRedisSerializer); template.setHashKeySerializer(stringRedisSerializer); Jackson2JsonRedisSerializer redisSerializer = new Jackson2JsonRedisSerializer(Object.class); template.setValueSerializer(redisSerializer); template.setHashValueSerializer(redisSerializer); template.afterPropertiesSet(); return template; &#125; @Bean IGlobalCache cache(RedisTemplate redisTemplate) &#123; return new AppRedisCacheManager(redisTemplate); &#125; &#125; redisTemplate封装 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376 /** * 系统全局Cache接口，具体缓存方式需要实现该接口 * * @author YuXD * @date 2021-01-05 10:38 * @since v1.0 */public interface IGlobalCache &#123; /** * 指定缓存失效时间 * * @param key 键 * @param time 时间(秒) * @return */ boolean expire(String key, long time); /** * @param key 键 不能为null * @return 时间(秒) 返回0代表为永久有效 */ long getExpire(String key); /** * 判断key是否存在 * * @param key 键 * @return true 存在 false不存在 */ boolean hasKey(String key); /** * 删除缓存 * * @param key 可以传一个值 或多个 */ void del(String... key);// ============================String============================= /** * 普通缓存获取 * * @param key 键 * @return 值 */ Object get(String key); /** * 普通缓存放入 * * @param key 键 * @param value 值 * @return true成功 false失败 */ boolean set(String key, Object value); /** * 普通缓存放入并设置时间 * * @param key 键 * @param value 值 * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期 * @return true成功 false 失败 */ boolean set(String key, Object value, long time); /** * 递增 * * @param key 键 * @param delta 要增加几(大于0) * @return */ long incr(String key, long delta); /** * 递减 * * @param key 键 * @param delta 要减少几(小于0) * @return */ long decr(String key, long delta); /** * HashGet * * @param key 键 不能为null * @param item 项 不能为null * @return 值 */ Object hget(String key, String item); /** * 获取hashKey对应的所有键值 * * @param key 键 * @return 对应的多个键值 */ Map&lt;Object, Object&gt; hmget(String key); /** * HashSet * * @param key 键 * @param map 对应多个键值 * @return true 成功 false 失败 */ boolean hmset(String key, Map&lt;String, Object&gt; map); /** * HashSet 并设置时间 * * @param key 键 * @param map 对应多个键值 * @param time 时间(秒) * @return true成功 false失败 */ boolean hmset(String key, Map&lt;String, Object&gt; map, long time); /** * 向一张hash表中放入数据,如果不存在将创建 * * @param key 键 * @param item 项 * @param value 值 * @return true 成功 false失败 */ boolean hset(String key, String item, Object value); /** * 向一张hash表中放入数据,如果不存在将创建 * * @param key 键 * @param item 项 * @param value 值 * @param time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间 * @return true 成功 false失败 */ boolean hset(String key, String item, Object value, long time); /** * 删除hash表中的值 * * @param key 键 不能为null * @param item 项 可以使多个 不能为null */ void hdel(String key, Object... item); /** * 判断hash表中是否有该项的值 * * @param key 键 不能为null * @param item 项 不能为null * @return true 存在 false不存在 */ boolean hHasKey(String key, String item); /** * hash递增 如果不存在,就会创建一个 并把新增后的值返回 * * @param key 键 * @param item 项 * @param by 要增加几(大于0) * @return */ double hincr(String key, String item, double by); /** * hash递减 * * @param key 键 * @param item 项 * @param by 要减少记(小于0) * @return */ double hdecr(String key, String item, double by); /** * 根据key获取Set中的所有值 * * @param key 键 * @return */ Set&lt;Object&gt; sGet(String key); /** * 根据value从一个set中查询,是否存在 * * @param key 键 * @param value 值 * @return true 存在 false不存在 */ boolean sHasKey(String key, Object value); /** * 将数据放入set缓存 * * @param key 键 * @param values 值 可以是多个 * @return 成功个数 */ long sSet(String key, Object... values); /** * 将set数据放入缓存 * * @param key 键 * @param time 时间(秒) * @param values 值 可以是多个 * @return 成功个数 */ long sSetAndTime(String key, long time, Object... values); /** * 获取set缓存的长度 * * @param key 键 * @return */ long sGetSetSize(String key); /** * 移除值为value的 * * @param key 键 * @param values 值 可以是多个 * @return 移除的个数 */ long setRemove(String key, Object... values); /** * 获取list缓存的内容 * * @param key 键 * @param start 开始 * @param end 结束 0 到 -1代表所有值 * @return */ List&lt;Object&gt; lGet(String key, long start, long end); /** * 获取list缓存的长度 * * @param key 键 * @return */ long lGetListSize(String key); /** * 通过索引 获取list中的值 * * @param key 键 * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推 * @return */ Object lGetIndex(String key, long index); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @return */ boolean lSet(String key, Object value); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @return */ boolean lSet(String key, Object value, long time); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @param time 时间(秒) * @return */ boolean lSetAll(String key, List&lt;Object&gt; value); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @param time 时间(秒) * @return */ boolean lSetAll(String key, List&lt;Object&gt; value, long time); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @return */ boolean rSet(String key, Object value); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @param time 时间(秒) * @return */ boolean rSet(String key, Object value, long time); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @return */ boolean rSetAll(String key, List&lt;Object&gt; value); /** * 将list放入缓存 * * @param key 键 * @param value 值 * @param time 时间(秒) * @return */ boolean rSetAll(String key, List&lt;Object&gt; value, long time); /** * 根据索引修改list中的某条数据 * * @param key 键 * @param index 索引 * @param value 值 * @return */ boolean lUpdateIndex(String key, long index, Object value); /** * 移除N个值为value * * @param key 键 * @param count 移除多少个 * @param value 值 * @return 移除的个数 */ long lRemove(String key, long count, Object value); /** * 从redis集合中移除[start,end]之间的元素 * * @param key * @param stard * @param end * @return */ void rangeRemove(String key, Long stard, Long end); /** * 返回当前redisTemplate * * @return */ RedisTemplate getRedisTemplate();&#125; 附件一 配置文件 redis.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748protected-mode noport 6379tcp-backlog 511timeout 0tcp-keepalive 0loglevel noticelogfile &quot;&quot;databases 16save 900 1save 300 10save 60 10000stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesdbfilename dump.rdbdir .&#x2F;slave-serve-stale-data yesslave-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-disable-tcp-nodelay noslave-priority 100appendonly noappendfilename &quot;appendonly.aof&quot;appendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbaof-load-truncated yeslua-time-limit 5000slowlog-log-slower-than 10000slowlog-max-len 128latency-monitor-threshold 0notify-keyspace-events &quot;&quot;hash-max-ziplist-entries 512hash-max-ziplist-value 64list-max-ziplist-size -2list-compress-depth 0set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64hll-sparse-max-bytes 3000activerehashing yesclient-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60hz 10aof-rewrite-incremental-fsync yes","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-01-20T02:09:33.241Z","updated":"2021-01-20T02:09:33.241Z","comments":true,"path":"2021/01/20/hello-world/","link":"","permalink":"http://yoursite.com/2021/01/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"},{"name":"Jedis","slug":"Jedis","permalink":"http://yoursite.com/tags/Jedis/"},{"name":"Docker","slug":"Docker","permalink":"http://yoursite.com/tags/Docker/"}]}